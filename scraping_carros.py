'''
Web Scraper de An√∫ncios de Carros - Coletando Dados do Mercado Livre

Este script foi desenvolvido para extrair dados de an√∫ncios de ve√≠culos do site Mercado Livre,
focando na coleta de informa√ß√µes √∫teis para an√°lise de mercado automotivo. Utilizamos Selenium
para automatizar a navega√ß√£o e extra√ß√£o de dados diretamente das p√°ginas de listagem.

üîç Informa√ß√µes extra√≠das por ve√≠culo:
- Nome do carro
- Ano de fabrica√ß√£o
- Quilometragem
- Pre√ßo
- Classifica√ß√£o do pre√ßo (Satisfat√≥rio, Mediano, Insatisfat√≥rio)
- Imagem do an√∫ncio
- Tipo de carroceria (ex: SUV, Sedan, Hatch etc.)
- Regi√£o do an√∫ncio

üõ†Ô∏è Tecnologias utilizadas:
- Python 3.x
- Selenium WebDriver (Google Chrome)
- Bibliotecas: `pandas`, `requests`, `re`, `math`

üìç Como alterar o tipo de carro na pesquisa:
O script est√° configurado para buscar apenas carros do tipo SUV, mas √© poss√≠vel alterar o tipo 
trocando o c√≥digo no final da URL original (armazenada na vari√°vel `url`). Abaixo est√£o os c√≥digos
de carroceria aceitos pelo Mercado Livre para voc√™ substituir conforme necess√°rio:

| Tipo de Carro       | C√≥digo para URL                |
|---------------------|-------------------------------|
| Caminh√£o leve       | VEHICLE*BODY*TYPE_452764      |
| Convers√≠vel         | VEHICLE*BODY*TYPE_452754      |
| Coup√©               | VEHICLE*BODY*TYPE_452753      |
| Furg√£o              | VEHICLE*BODY*TYPE_452763      |
| Hatch               | VEHICLE*BODY*TYPE_452756      |
| Minivan             | VEHICLE*BODY*TYPE_452762      |
| Monovolume          | VEHICLE*BODY*TYPE_452761      |
| Off-Road            | VEHICLE*BODY*TYPE_452757      |
| Perua               | VEHICLE*BODY*TYPE_452755      |
| Pick-up             | VEHICLE*BODY*TYPE_452760      |
| Roadster            | VEHICLE*BODY*TYPE_452765      |
| Sedan               | VEHICLE*BODY*TYPE_452758      |
| SUV                 | VEHICLE*BODY*TYPE_452759      |
| Van                 | VEHICLE*BODY*TYPE_452766      |

üí° Exemplo de URL modificada:
Para buscar apenas por **Sedans**, troque a linha:
url = 'https://lista.mercadolivre.com.br/veiculos/carros-caminhonetes/carros_NoIndex_True_VEHICLE*BODY*TYPE_452759'
'''

# Importa as bibliotecas necess√°rias
import pandas as pd
import math
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

# Configura√ß√£o do Selenium
service = Service()
options = webdriver.ChromeOptions()
driver = webdriver.Chrome(service=service, options=options)

# Listas para armazenar os dados coletados
Lnome = []     # Nome do carro
Lano = []      # Ano de fabrica√ß√£o
Lkm = []       # Quilometragem
Lpreco = []    # Pre√ßo
Lclass = []    # Classifica√ß√£o de pre√ßo (satisfat√≥rio, mediano, insatisfat√≥rio)
Limg = []      # URL da imagem do carro
Ltipo = []     # Tipo do carro (neste caso, 'SUV' fixo)
Lregiao = []   # Localiza√ß√£o (cidade/estado) do vendedor

# URL da primeira p√°gina da categoria SUV
url = 'https://lista.mercadolivre.com.br/veiculos/carros-caminhonetes/carros_NoIndex_True_VEHICLE*BODY*TYPE_452759'
driver.get(url)

# --- Primeira p√°gina: Nome e tipo do carro ---
for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element'))):
    Lnome.append(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element')[i].text)
    print(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element')[i].text)
    Ltipo.append('SUV')  # Adiciona o tipo fixo para todos (pode ser din√¢mico futuramente)

# Regi√£o do vendedor (ex: "S√£o Paulo", "Rio de Janeiro")
for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element'))):
    Lregiao.append(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element')[i].text)
    print(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element')[i].text)

# --- Coleta das imagens da primeira p√°gina ---
j = 0
while True:
    if j < 48:  # Limita a 48 imagens por p√°gina
        try:
            url = driver.find_elements(By.CSS_SELECTOR, 'img.ui-search-result-image__element')[j].get_attribute('src')

            # Ignora imagens base64 usadas como placeholder
            if url.startswith('data:image/gif'):
                continue
            else:
                j += 1
                Limg.append(url)
                print(url)

            # Rola a p√°gina a cada 5 imagens para for√ßar o carregamento lazy loading
            if j % 5 == 0:
                driver.execute_script("window.scrollBy(0, 1000);")
        except:
            continue
    else:
        break

# --- Ano e quilometragem dos carros ---
for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute'))):
    if i % 2 == 0:
        # Alterna entre ano e km
        Lano.append(int(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text))
        print(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)
    else:
        Lkm.append(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)
        print(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)

# --- Pre√ßo + Classifica√ß√£o ---
for i in range(5, len(driver.find_elements(By.CSS_SELECTOR, 'span.andes-money-amount__fraction'))):
    preco = float(driver.find_elements(By.CSS_SELECTOR, 'span.andes-money-amount__fraction')[i].text))
    Lpreco.append(preco)
    print(preco)

    # Classifica√ß√£o por faixa de pre√ßo
    if preco <= 45_000:
        Lclass.append('Satisfat√≥rio')
    elif preco >= 85_000:
        Lclass.append('Insatisfat√≥rio')
    else:
        Lclass.append('Mediano')

# --- Verifica se existe o bot√£o "Seguinte" ---
if driver.find_elements(By.CSS_SELECTOR, 'span.andes-pagination__arrow-title')[1].text == 'Seguinte':
    proxima = driver.find_elements(By.CSS_SELECTOR, 'span.andes-pagination__arrow-title')[1]
    driver.execute_script("window.scrollBy(0, 100000);")
    proxima.click()

# --- Loop pelas pr√≥ximas p√°ginas ---
while True:
    # Nome e tipo
    for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element'))):
        Lnome.append(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element')[i].text)
        print(driver.find_elements(By.CSS_SELECTOR, 'a.ui-search-item__group__element')[i].text)
        Ltipo.append('SUV')

    # Regi√£o
    for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element'))):
        Lregiao.append(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element')[i].text)
        print(driver.find_elements(By.CSS_SELECTOR, 'span.ui-search-item__group__element')[i].text)

    # Imagens
    j = 0
    while True:
        if j < 48:
            try:
                url = driver.find_elements(By.CSS_SELECTOR, 'img.ui-search-result-image__element')[j].get_attribute('src')

                if url.startswith('data:image/gif'):
                    continue
                else:
                    j += 1
                    Limg.append(url)
                    print(url)

                if j % 5 == 0:
                    driver.execute_script("window.scrollBy(0, 1000);")
            except:
                continue
        else:
            break

    # Ano e KM
    for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute'))):
        if i % 2 == 0:
            Lano.append(int(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text))
            print(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)
        else:
            Lkm.append(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)
            print(driver.find_elements(By.CSS_SELECTOR, 'li.ui-search-card-attributes__attribute')[i].text)

    # Pre√ßo + classifica√ß√£o
    for i in range(0, len(driver.find_elements(By.CSS_SELECTOR, 'span.andes-money-amount__fraction'))):
        preco = float(driver.find_elements(By.CSS_SELECTOR, 'span.andes-money-amount__fraction')[i].text))
        Lpreco.append(preco)
        print(preco)

        if preco <= 45_000:
            Lclass.append('Satisfat√≥rio')
        elif preco >= 85_000:
            Lclass.append('Insatisfat√≥rio')
        else:
            Lclass.append('Mediano')

    # Se ainda tiver p√°gina seguinte, clica nela e continua
    if driver.find_elements(By.CSS_SELECTOR, 'span.andes-pagination__arrow-title')[1].text == 'Seguinte':
        proxima = driver.find_elements(By.CSS_SELECTOR, 'span.andes-pagination__arrow-title')[1]
        driver.execute_script("window.scrollBy(0, 100000);")
        proxima.click()
    else:
        break

# --- Impress√£o de debug: tamanhos das listas ---
print(len(Lnome))
print(len(Lano))
print(len(Lkm))
print(len(Lpreco))
print(len(Lclass))
print(len(Limg))
print(len(Ltipo))
print(len(Lregiao))
